DataPy Framework - Updated Project Specification
Overview
A Python framework for creating reusable, registry-based ETL components that can be invoked from both CLI (Autosys/DataStage) and other Python scripts. The framework provides unified parameter management, logging, result handling, and a centralized mod registry for fast discovery and execution.
Repository Structure
‚îú‚îÄ‚îÄ datapy/                     # Framework (Org-Level)
‚îÇ   ‚îú‚îÄ‚îÄ mod_registry.json       # Central mod registry (single source of truth)
‚îÇ   ‚îú‚îÄ‚îÄ mod_manager/            # Framework engine
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ registry.py         # NEW: Registry interface and management
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cli.py              # CLI runner (updated with registry)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sdk.py              # Python SDK (updated with registry)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.py           # Common logging (keep as-is)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ params.py           # Parameter management + project config discovery (keep as-is)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ result.py           # ModResult interface (keep as-is)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ base.py             # Base classes (keep as-is)
‚îÇ   ‚îú‚îÄ‚îÄ __main__.py             # Enable python -m datapy execution
‚îÇ   ‚îú‚îÄ‚îÄ mods/                   # All reusable mods (shared by everyone)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sources/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ csv_reader.py   # Sample mod
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ transformers/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ data_cleaner.py # Sample mod
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sinks/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ csv_writer.py   # Sample mod
‚îÇ   ‚îú‚îÄ‚îÄ utils/                  # Common utility functions (not mods)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ file_utils.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ data_utils.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ common_utils.py
‚îÇ   ‚îî‚îÄ‚îÄ tests/                  # Framework tests
‚îÇ       ‚îú‚îÄ‚îÄ mod_manager/
‚îÇ       ‚îî‚îÄ‚îÄ mods/
‚îÇ
‚îú‚îÄ‚îÄ projects/                   # All Projects (user projects)
‚îÇ   ‚îú‚îÄ‚îÄ customer-analytics/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ project_defaults.yaml
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jobs/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ daily-etl/
‚îÇ   ‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ daily_customer_etl.py      # Python orchestration
‚îÇ   ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ daily_customer_etl.yaml    # CLI config
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ weekly-reports/
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ weekly_reports.py
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ weekly_reports.yaml
‚îú‚îÄ‚îÄ setup.py
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
NEW: Registry System
1. Central Mod Registry (mod_registry.json)
Single source of truth for all available mods with metadata, schemas, and discovery info:
json{
  "_metadata": {
    "version": "1.0.0",
    "created": "2024-08-22",
    "description": "DataPy Central Mod Registry"
  },
  "mods": {
    "csv_reader": {
      "module_path": "datapy.mods.sources.csv_reader",
      "metadata": {
        "type": "csv_reader",
        "version": "1.0.0",
        "description": "Reads CSV files with validation and format conversion",
        "category": "sources",
        "author": "DataPy Team"
      },
      "interface": {
        "input_ports": [],
        "output_ports": ["data"],
        "globals_produced": ["row_count", "file_size"],
        "globals_consumed": ["base_path", "encoding"]
      },
      "dependencies": {
        "packages": ["pandas>=1.5.0", "chardet>=4.0.0"],
        "python_version": ">=3.8"
      },
      "config_schema": {
        "type": "object",
        "required": ["file_path"],
        "properties": {
          "file_path": {
            "type": "string",
            "description": "Path to CSV file"
          },
          "encoding": {
            "type": "string",
            "default": "utf-8",
            "description": "File encoding",
            "enum": ["utf-8", "latin-1", "cp1252"]
          },
          "delimiter": {
            "type": "string",
            "default": ",",
            "description": "CSV delimiter character"
          }
        }
      }
    }
  }
}
2. Registry Manager (registry.py)
Core registry functionality for mod discovery, validation, and execution:
pythonclass ModRegistry:
    def __init__(self):
        self.registry = self._load_registry()
    
    # Core runtime functions (fast execution)
    def get_mod_info(self, mod_type: str) -> dict
    def validate_params_schema(self, mod_type: str, params: dict) -> dict
    def execute_mod(self, mod_type: str, params: dict, mod_name: str) -> dict
    def list_available_mods(self, category: str = None) -> list
    
    # Registry management functions
    def register_mod(self, mod_path: str) -> bool
    def validate_mod_structure(self, mod_path: str) -> bool
    def update_registry(self, registry_data: dict) -> bool
    
    # Internal helpers
    def _load_registry(self) -> dict
    def _save_registry(self, registry_data: dict) -> bool
    def _import_mod_module(self, module_path: str) -> object
3. Enhanced CLI with Registry Commands
Updated CLI interface with registry management:
bash# Existing commands (keep same interface)
python -m datapy run-mod extract_customers --params daily_job.yaml
python -m datapy run-script my_pipeline.py --params config.yaml

# NEW: Registry management commands
python -m datapy list-registry                    # List all registered mods
python -m datapy list-registry --category sources # List by category
python -m datapy register-mod datapy.mods.sources.csv_reader  # Register new mod
python -m datapy validate-registry               # Validate registry integrity
python -m datapy mod-info csv_reader            # Show detailed mod info
4. Enhanced SDK with Registry Integration
Updated Python SDK with registry-based execution (same API, faster performance):
python# Existing API (unchanged)
from datapy.mod_manager.sdk import set_global_config, run_mod

set_global_config({
    "base_path": "/data/2024-08-12",
    "log_level": "DEBUG",
    "log_path": "/logs/etl/"
})

# Fast registry-based execution
result = run_mod("csv_reader", {
    "file_path": "customers.csv",
    "delimiter": "|"
}, "extract_customers")

# NEW: Registry query functions
from datapy.mod_manager.registry import ModRegistry
registry = ModRegistry()
available_mods = registry.list_available_mods(category="sources")
mod_info = registry.get_mod_info("csv_reader")
Updated Execution Flow
Registry-Based Execution (Fast Path):
CLI/SDK ‚Üí Registry.get_mod_info() ‚Üí Schema validation ‚Üí Import & Execute ‚Üí ModResult
Benefits Over Previous System:

üöÄ Performance: No import discovery, direct module loading
üìã Schema Validation: JSON schema validation instead of Pydantic classes
üéØ Simple Discovery: Single registry lookup vs. filesystem scanning
‚ö° Fast Startup: Pre-validated mods, no runtime metadata validation
üõ†Ô∏è Admin Friendly: Simple registration process

Mod Structure (Simplified)
Registry-Compliant Mod Example:
python# datapy/mods/sources/csv_reader.py
from datapy.mod_manager.result import ModResult

def run(params):
    """
    Pure business logic - metadata handled by registry.
    
    Args:
        params: Dictionary with validated parameters from registry schema
        
    Returns:
        ModResult dictionary
    """
    result = ModResult("csv_reader", params.get("_mod_name", "unknown"))
    
    try:
        import pandas as pd
        
        df = pd.read_csv(
            params["file_path"], 
            encoding=params.get("encoding", "utf-8"),
            delimiter=params.get("delimiter", ",")
        )
        
        result.add_metric("rows_read", len(df))
        result.add_metric("columns_read", len(df.columns))
        result.add_artifact("data", df)
        result.add_global("row_count", len(df))
        
        return result.success()
        
    except FileNotFoundError as e:
        result.add_error(f"File not found: {e}")
        return result.error(20)  # VALIDATION_ERROR
    except Exception as e:
        result.add_error(f"CSV reading failed: {e}")
        return result.error(30)  # RUNTIME_ERROR
Registry Management Workflow
1. Mod Registration Process:
bash# 1. Create mod file
# 2. Register mod
python -m datapy register-mod datapy.mods.sources.csv_reader

# Registration validates:
# - Module can be imported
# - Has run() function with correct signature  
# - Metadata is valid
# - Schema is valid JSON schema
# - Dependencies are resolvable
2. Registry Validation:
bash# Validate entire registry
python -m datapy validate-registry

# Checks:
# - All registered mods can be imported
# - All schemas are valid JSON schema
# - No duplicate mod types
# - All dependencies are available
Parameter Resolution (Unchanged)
Resolution Chain:
Mod Defaults (registry schema defaults) ‚Üí Project Defaults ‚Üí Job Mod Params
Project Configuration (Keep Current System):
yaml# projects/customer-analytics/project_defaults.yaml
project_name: "customer_analytics"
project_version: "2.1.0"

mod_defaults:
  csv_reader:
    encoding: "utf-8"
    base_path: "/data/customer_analytics"

logging:
  base_path: "/logs/customer_analytics"
  retention_days: 30
Job Configuration:
yaml# projects/customer-analytics/jobs/daily-etl/daily_customer_etl.yaml
globals:
  base_path: "/data/2024-08-12"
  log_level: "DEBUG"

mods:
  extract_customers:          # mod_name (unique instance)
    _type: csv_reader         # mod_type (registry lookup)
    file_path: "customers.csv"
    delimiter: "|"
  
  extract_orders:             # different instance, same mod type
    _type: csv_reader         
    file_path: "orders.csv"
Standard Result Format (Unchanged)
Success Response:
python{
    "status": "success",        # success, warning, error
    "execution_time": 2.34,     # seconds
    "exit_code": 0,
    "metrics": {
        "rows_processed": 10000,
        "rows_output": 9876
    },
    "artifacts": {
        "data": pandas_dataframe,
        "output_file": "/data/processed/customers_clean.csv"
    },
    "globals": {
        "batch_id": "BATCH_20240812_001",
        "total_records": 10000
    },
    "warnings": [],
    "errors": [],
    "logs": {
        "log_file": "/logs/etl/customer_etl_job_20240812_143022.log",
        "run_id": "csv_reader_a1b2c3d4",
        "mod_type": "csv_reader",
        "mod_name": "extract_customers"
    }
}
Implementation Phases (End at Phase 3)
Phase 1: Registry Foundation

‚úÖ Create mod_registry.json structure
‚úÖ Implement registry.py core functionality
‚úÖ Add registry CLI commands
‚úÖ Validate registry system works

Phase 2: Integration (Non-Breaking)

‚úÖ Update sdk.py to use registry (keep same API)
‚úÖ Update cli.py to use registry for mod discovery
‚úÖ Ensure all existing usage patterns still work
‚úÖ No fallback needed - registry is primary

Phase 3: Optimization & Samples

‚úÖ Optimize sdk.py performance (break down large functions)
‚úÖ Create 3 sample mods and register them
‚úÖ Final performance and functionality validation
‚úÖ PRODUCTION READY STATE

Updated Dependencies
txt# Core dependencies (unchanged)
pydantic>=2.0.0
PyYAML>=6.0
click>=8.0.0

# NEW: JSON schema validation
jsonschema>=4.0.0
Key Design Principles (Enhanced)

Registry-First: All mod discovery via central registry
No Fallbacks: Registry is the single source of truth
Fast Execution: Pre-validated mods, minimal runtime overhead
Backward Compatible: All existing APIs unchanged
Simple Registration: Easy mod registration process
Schema-Driven: JSON schema validation for parameters
Admin Friendly: Simple registry management commands
Single Responsibility: Registry handles discovery, mods handle business logic
Production Ready: Comprehensive error handling and validation